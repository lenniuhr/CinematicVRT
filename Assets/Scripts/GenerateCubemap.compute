#pragma kernel GenerateCubemap

#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
#include "Assets/Shaders/Library/Common.hlsl"

Texture2DArray<float4> _CubemapFaces;
RWTexture2DArray<float4> _Result;

TEXTURECUBE(_Cubemap);  SAMPLER(sampler_Cubemap);

int _Face;
int _KernelRadius;
float _Sigma;

float Gauss(float sigma, int x, int y)
{
    return exp(-(x * x + y * y) / (2 * sigma * sigma));
}

float4 GaussianBlur(int3 id)
{
    int kernelRadius = _KernelRadius;
    float sigma = _Sigma;
    float sigmaR = 0.5;
    
    float4 color = 0;
    float totalWeight = 0;
    
    for (int x = -kernelRadius; x <= kernelRadius; x++)
    {
        for (int y = -kernelRadius; y <= kernelRadius; y++)
        {
            int3 neighborId = id + int3(x, y, 0);
            
            int3 newId = neighborId;
            
            int gaussX = x;
            int gaussY = y;
            
            float gaussXAmount01 = (256.0 - neighborId.x) / 256.0;
            float gaussYAmount01 = (256.0 - neighborId.y) / 256.0;
            
            if (_Face == 0)
            {
                if (neighborId.y > 511)
                    continue;
                
                if (neighborId.x < 0)
                {
                    newId.x = neighborId.x + 512;
                    newId.z = 4;
                    
                    //newId.y += round(gaussYAmount01 * (-neighborId.x));
                }
                else if (neighborId.y > 511)
                {
                    newId.x = 512 - (neighborId.y - 512);
                    newId.y = neighborId.x;
                    newId.z = 3;
                    
                    //gaussX -= round(gaussXAmount01 * (neighborId.y - 512.0));
                }

            }
            
            if (_Face == 4)
            {
                
                if (neighborId.y > 511)
                    continue;
                
                if (neighborId.x > 511)
                {
                    newId.x = neighborId.x - 512;
                    newId.z = 0;
                    
                    //newId.y += round(gaussYAmount01 * (neighborId.x - 512));
                }
                else if (neighborId.y > 511)
                {
                    newId.x = neighborId.x;
                    newId.y = neighborId.y - 512;
                    newId.z = 3;
                }

            }
            
            if (_Face == 3)
            {
                if (neighborId.x > 511 && neighborId.y < 0)
                {
                    continue;
                }
                else if (neighborId.x > 511)
                {
                    newId.x = neighborId.y;
                    newId.y = 512 - (neighborId.x - 512);
                    newId.z = 0;
                    
                    //gaussY += round(gaussYAmount01 * (neighborId.x - 512.0));
                }
                else if (neighborId.y < 0)
                {
                    newId.x = neighborId.x;
                    newId.y = neighborId.y + 512;
                    newId.z = 4;
                }
            }
            
            
            float4 value = _CubemapFaces[newId];
            
            float weight = Gauss(sigma, gaussX, gaussY);
            
            color += weight * value;
            totalWeight += weight;
        }
    }

    return color / totalWeight;
}

float4 Blur(float3 direction, float3 up, float3 right)
{
    float angle = 2 * PI / (4 * 512);

    right = cross(direction, up);
    
    int kernelRadius = round(_Sigma * 5);
    
    float4 color = 0;
    float totalWeight = 0;
    for (int i = -kernelRadius; i <= kernelRadius; i++)
    {
        float3x3 iRotation = AngleAxis3x3(i * angle, up);
        
        for (int j = -kernelRadius; j <= kernelRadius; j++)
        {
            float3x3 jRotation = AngleAxis3x3(j * angle, right);
            
            float3 nDir = mul(jRotation, mul(iRotation, direction));
            
            float4 value = SAMPLE_TEXTURECUBE_LOD(_Cubemap, sampler_Cubemap, nDir, 0);
            
            float weight = Gauss(_Sigma, i, j);
            
            color += weight * value;
            totalWeight += weight;
        }
    }
    
    return color / totalWeight;
}

float3 GetDirection(float xUV, float yUV)
{
    if (_Face == 0)
    {
        return normalize(float3(1, -yUV, -xUV));
    }
    else if (_Face == 1)
    {
        return normalize(float3(-1, -yUV, xUV));
    }
    else if(_Face == 2)
    {
        return normalize(float3(xUV, 1, yUV));
    }
    else if (_Face == 3)
    {
        return normalize(float3(xUV, -1, -yUV));
    }
    else if (_Face == 4)
    {
        return normalize(float3(xUV, -yUV, 1));
    }
    else if (_Face == 5)
    {
        return normalize(float3(-xUV, -yUV, -1));
    }
    return 1;
}

float3 GetFace()
{
    if (_Face == 0)
    {
        return float3(1, 0, 0);
    }
    else if (_Face == 1)
    {
        return float3(-1, 0, 0);
    }
    else if (_Face == 2)
    {
        return float3(0, 1, 0);
    }
    else if (_Face == 3)
    {
        return float3(0, -1, 0);
    }
    else if (_Face == 4)
    {
        return float3(0, 0, 1);
    }
    else if (_Face == 5)
    {
        return float3(0, 0, -1);
    }
    return 1;
}

[numthreads(8, 8, 1)]
void GenerateCubemap(int3 id : SV_DispatchThreadID)
{
    int3 index = int3(id.x, id.y, _Face);
    
    //_Result[index] = GaussianBlur(index);
    
    _Result[index] = float4(id.x / 512.0, id.y / 512.0, 0, 1);
    
    float xUV = ((id.x + 0.5) / 512.0) * 2 - 1;
    float yUV = ((id.y + 0.5) / 512.0) * 2 - 1;
    
    float3 direction = GetDirection(xUV, yUV);
    
    float3 up = lerp(float3(0, 1, 0), float3(1, 0, 0), abs(direction.y));
    
    float3 face = GetFace();
    float3 some = cross(direction, face);
        
    _Result[index] = Blur(direction, normalize(some), float3(0, 1, 0));
}
